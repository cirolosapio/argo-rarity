// Generated by 'unplugin-auto-import'
export {}
declare global {
  const $ref: typeof import('vue/macros')['$ref']
  const defineLoader: typeof import('vue-router/auto')['defineLoader']
  const isDark: typeof import('./src/composables/dark')['isDark']
  const onMounted: typeof import('vue')['onMounted']
  const searchNfts: typeof import('./src/composables/api')['searchNfts']
  const state: typeof import('./src/composables/storage')['state']
  const toggleDark: typeof import('./src/composables/dark')['toggleDark']
  const useDark: typeof import('@vueuse/core')['useDark']
  const useRoute: typeof import('vue-router/auto')['useRoute']
  const useRouter: typeof import('vue-router/auto')['useRouter']
  const useStorage: typeof import('@vueuse/core')['useStorage']
  const useToggle: typeof import('@vueuse/core')['useToggle']
  const watchEffect: typeof import('vue')['watchEffect']
}
// for vue template auto import
import { UnwrapRef } from 'vue'
declare module '@vue/runtime-core' {
  interface ComponentCustomProperties {
    readonly $ref: UnwrapRef<typeof import('vue/macros')['$ref']>
    readonly defineLoader: UnwrapRef<typeof import('vue-router/auto')['defineLoader']>
    readonly isDark: UnwrapRef<typeof import('./src/composables/dark')['isDark']>
    readonly onMounted: UnwrapRef<typeof import('vue')['onMounted']>
    readonly searchNfts: UnwrapRef<typeof import('./src/composables/api')['searchNfts']>
    readonly state: UnwrapRef<typeof import('./src/composables/storage')['state']>
    readonly toggleDark: UnwrapRef<typeof import('./src/composables/dark')['toggleDark']>
    readonly useDark: UnwrapRef<typeof import('@vueuse/core')['useDark']>
    readonly useRoute: UnwrapRef<typeof import('vue-router/auto')['useRoute']>
    readonly useRouter: UnwrapRef<typeof import('vue-router/auto')['useRouter']>
    readonly useStorage: UnwrapRef<typeof import('@vueuse/core')['useStorage']>
    readonly useToggle: UnwrapRef<typeof import('@vueuse/core')['useToggle']>
    readonly watchEffect: UnwrapRef<typeof import('vue')['watchEffect']>
  }
}
